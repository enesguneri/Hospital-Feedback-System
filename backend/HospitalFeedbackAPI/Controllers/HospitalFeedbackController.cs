using HospitalFeedbackAPI.Data;
using HospitalFeedbackAPI.DTO;
using HospitalFeedbackAPI.Models;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System.Security.Claims;

namespace HospitalFeedbackAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class HospitalFeedbackController(AppDbContext context) : ControllerBase
    {
        private readonly AppDbContext _context = context;

        // GET: api/HospitalFeedback
        [Authorize(Roles = "Admin")]
        [HttpGet]
        public async Task<ActionResult<IEnumerable<HospitalFeedbackDto>>> GetAll()
        {
            var feedbacks = await _context.HospitalFeedbacks.ToListAsync();
            var dtos = feedbacks.Select(f => new HospitalFeedbackDto
            {
                Id = f.Id,
                Subject = f.Subject,
                Message = f.Message,
                CreatedAt = f.CreatedAt,
                Answer = f.Answer
            }).ToList();
            return Ok(dtos);
        }

        // GET: api/HospitalFeedback/5
        [Authorize(Roles = "Admin")]
        [HttpGet("{id}")]
        public async Task<ActionResult<HospitalFeedbackDto>> GetById(int id)
        {
            var feedback = await _context.HospitalFeedbacks.FindAsync(id);

            if (feedback == null)
                return NotFound();

            var dto = new HospitalFeedbackDto
            {
                Id = feedback.Id,
                Subject = feedback.Subject,
                Message = feedback.Message,
                CreatedAt = feedback.CreatedAt,
                Answer = feedback.Answer
            };
            return Ok(dto);
        }

        // POST: api/HospitalFeedback
        [Authorize(Roles = "Admin,Patient")]
        [HttpPost]
        public async Task<ActionResult<HospitalFeedbackDto>> Create(HospitalFeedbackCreateDto request)
        {
            var email = User.FindFirst(ClaimTypes.Email)?.Value;
            var user = await _context.Users.FirstOrDefaultAsync(u => u.Email == email);
            if (user == null)
                return Unauthorized();

            var feedback = new HospitalFeedback
            {
                Id = 0, // Id will be generated by the database
                UserId = user.Id,
                Subject = request.Subject,
                Message = request.Message,
                CreatedAt = DateTime.UtcNow
            };

            _context.HospitalFeedbacks.Add(feedback);
            await _context.SaveChangesAsync();

            var dto = new HospitalFeedbackDto
            {
                Id = feedback.Id,
                Subject = feedback.Subject,
                Message = feedback.Message,
                CreatedAt = feedback.CreatedAt,
                Answer = feedback.Answer
            };

            return CreatedAtAction(nameof(GetById), new { id = feedback.Id }, dto);
        }

        // PUT: api/HospitalFeedback/5
        [Authorize(Roles = "Admin,Patient")]
        [HttpPut("{id}")]
        public async Task<IActionResult> Update(int id, HospitalFeedbackDto request)
        {
            var feedback = await _context.HospitalFeedbacks.FindAsync(id);
            if (feedback == null)
                return NotFound();

            feedback.Subject = request.Subject;
            feedback.Message = request.Message;
            feedback.CreatedAt = request.CreatedAt;
            feedback.Answer = request.Answer;

            await _context.SaveChangesAsync();

            return NoContent();
        }

        // PUT: api/HospitalFeedback/5/answer
        [Authorize(Roles = "Admin")]
        [HttpPut("{id}/answer")]
        public async Task<IActionResult> AnswerFeedback(int id, string answer)
        {
            var feedback = await _context.HospitalFeedbacks.FindAsync(id);
            if (feedback == null)
                return NotFound();

            feedback.Answer = answer;
            await _context.SaveChangesAsync();

            return NoContent();
        }

        // DELETE: api/HospitalFeedback/5
        [Authorize(Roles = "Admin,Patient")]
        [HttpDelete("{id}")]
        public async Task<IActionResult> Delete(int id)
        {
            var feedback = await _context.HospitalFeedbacks.FindAsync(id);
            if (feedback == null)
                return NotFound();

            _context.HospitalFeedbacks.Remove(feedback);
            await _context.SaveChangesAsync();

            return NoContent();
        }

        [Authorize(Roles = "Admin,Patient")]
        [HttpGet("my-feedback")]
        public async Task<IActionResult> GetMyFeedback()
        {
            var email = User.FindFirst(ClaimTypes.Email)?.Value;
            var user = await _context.Users.FirstOrDefaultAsync(u => u.Email == email);
            if (user == null) return Unauthorized();

            var feedbacks = await _context.HospitalFeedbacks
                .Where(f => f.UserId == user.Id)
                .ToListAsync();

            var dtos = feedbacks.Select(f => new HospitalFeedbackDto
            {
                Id = f.Id,
                Subject = f.Subject,
                Message = f.Message,
                CreatedAt = f.CreatedAt,
                Answer = f.Answer
            }).ToList();

            return Ok(dtos);
        }
    }
}
