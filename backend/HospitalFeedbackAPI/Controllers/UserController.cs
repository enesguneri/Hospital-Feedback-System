using HospitalFeedbackAPI.Data;
using HospitalFeedbackAPI.DTO;
using HospitalFeedbackAPI.Helpers;
using HospitalFeedbackAPI.Models;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System.Security.Claims;

namespace HospitalFeedbackAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class UserController(AppDbContext context) : ControllerBase
    {
        private readonly AppDbContext _context = context;

        // GET: api/User
        [Authorize(Roles = "Admin")]
        [HttpGet]
        public async Task<ActionResult<IEnumerable<UserDto>>> GetUsers()
        {
            var users = await _context.Users
                .Include(u => u.DoctorFeedbacks)
                .Include(u => u.HospitalFeedbacks)
                .Select(u => new UserDto
                {
                    Id = u.Id,
                    FullName = u.FullName,
                    Email = u.Email,
                    Role = u.Role,
                    DoctorFeedbacks = u.DoctorFeedbacks,
                    HospitalFeedbacks = u.HospitalFeedbacks
                })
                .ToListAsync();

            return users;
        }

        [HttpGet("me")]
        public IActionResult GetMyInfo()
        {
            var email = User.FindFirst(ClaimTypes.Email)?.Value;

            if (string.IsNullOrEmpty(email))
                return Unauthorized();

            var user = _context.Users
                .Include(u => u.DoctorFeedbacks)
                .Include(u => u.HospitalFeedbacks)
                .FirstOrDefault(u => u.Email == email);

            if (user == null)
                return NotFound();

            var response = new UserDto
            {
                Id = user.Id,
                FullName = user.FullName,
                Email = user.Email,
                Role = user.Role,
            };

            return Ok(response);
        }

        // GET: api/User/5
        [Authorize(Roles = "Admin")]
        [HttpGet("{id}")]
        public async Task<ActionResult<UserDto>> GetUser(int id)
        {
            var user = await _context.Users
                .Include(u => u.DoctorFeedbacks)
                .Include(u => u.HospitalFeedbacks)
                .FirstOrDefaultAsync(u => u.Id == id);

            if (user == null)
                return NotFound();

            var userDto = new UserDto
            {
                Id = user.Id,
                FullName = user.FullName,
                Email = user.Email,
                Role = user.Role,
                DoctorFeedbacks = user.DoctorFeedbacks,
                HospitalFeedbacks = user.HospitalFeedbacks
            };

            return userDto;
        }

        // GET: api/User/role/patient
        [Authorize(Roles = "Admin")]
        [HttpGet("role/{role}")]
        public async Task<ActionResult<IEnumerable<UserDto>>> GetUsersByRole(string role)
        {
            var users = await _context.Users
                .Where(u => u.Role.ToLower() == role.ToLower())
                .Include(u => u.DoctorFeedbacks)
                .Include(u => u.HospitalFeedbacks)
                .Select(u => new UserDto
                {
                    Id = u.Id,
                    FullName = u.FullName,
                    Email = u.Email,
                    Role = u.Role,
                    DoctorFeedbacks = u.DoctorFeedbacks,
                    HospitalFeedbacks = u.HospitalFeedbacks
                })
                .ToListAsync();

            return users;
        }

        // POST: api/User
        [HttpPost("create-patient")]
        public async Task<ActionResult<RegisterUserDto>> CreateUser(RegisterUserDto dto)
        {
            if (string.IsNullOrEmpty(dto.Email) || string.IsNullOrEmpty(dto.Password))
            {
                return BadRequest("Email ve şifre zorunludur.");
            }
            var existingUser = _context.Users.FirstOrDefault(u => u.Email == dto.Email);
            if (existingUser != null)
            {
                return BadRequest("Bu email zaten kayıtlı.");
            }

            var user = new User
            {
                Id = 0, // Id will be generated by the database
                FullName = dto.FullName,
                Email = dto.Email,
                Password = PasswordHasher.HashPassword(dto.Password),
                Role = "Patient"
            };
            _context.Users.Add(user);
            await _context.SaveChangesAsync();

            return Ok(new UserDto
            {
                Id = user.Id,
                FullName = user.FullName,
                Email = user.Email,
                Role = user.Role
            });

        }

        [Authorize(Roles = "Admin")]
        [HttpPost("create-admin")]
        public IActionResult CreateAdmin(RegisterUserDto dto)
        {
            var user = new User
            {
                Id = 0, // Id will be generated by the database
                FullName = dto.FullName,
                Email = dto.Email,
                Password = PasswordHasher.HashPassword(dto.Password),
                Role = "Admin"
            };
            _context.Users.Add(user);
            _context.SaveChanges();

            return Ok(new UserDto
            {
                Id = user.Id,
                FullName = user.FullName,
                Email = user.Email,
                Role = user.Role
            });

        }

        // PUT: api/User/5
        [Authorize(Roles = "Admin")]
        [HttpPut("{id}")]
        public async Task<IActionResult> UpdateUser(int id, UserDto dto)
        {
            var user = await _context.Users.FindAsync(id);
            if (user == null)
            {
                return NotFound("Kullanıcı bulunamadı.");
            }
            if (string.IsNullOrEmpty(user.Email) || string.IsNullOrEmpty(user.Password))
            {
                return BadRequest("Email ve şifre zorunludur.");
            }
            if (_context.Users.Any(u => u.Email == user.Email))
            {
                return BadRequest("Bu email zaten kayıtlı.");
            }


            //güncelleme işlemi için gerekli atamalar yapılacak.
            user.FullName = dto.FullName;
            user.Email = dto.Email;
            user.Role = dto.Role;


            _context.Entry(user).State = EntityState.Modified;

            try
            {
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!_context.Users.Any(e => e.Id == id))
                    return NotFound();
                else
                    throw;
            }

            return Ok(new UserDto
            {
                Id = user.Id,
                FullName = user.FullName,
                Email = user.Email,
                Role = user.Role
            });
        }

        // DELETE: api/User/5
        [Authorize(Roles = "Admin")]
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteUser(int id)
        {
            var user = await _context.Users.FindAsync(id);

            if (user == null)
                return NotFound();

            _context.Users.Remove(user);
            await _context.SaveChangesAsync();

            return NoContent();
        }

    }
}
